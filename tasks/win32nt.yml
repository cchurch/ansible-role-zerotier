---

- name: check if zerotier-cli is installed
  win_command: "{{ zerotier_cli_path | quote }} -v"
  register: _zerotier_version
  changed_when: false
  ignore_errors: true

- name: compare zerotier versions
  block:
    - name: fetch latest zerotier release version
      uri:
        url: https://api.github.com/repos/zerotier/ZeroTierOne/releases/latest
      register: _zerotier_latest_release
      delegate_to: localhost
    - name: compare current and latest versions
      set_fact:
        _zerotier_needs_upgrade: >-
          {{ _zerotier_version.stdout is
          version_compare(_zerotier_latest_release.json.tag_name, operator='lt') |
          bool }}
  when: zerotier_state == 'latest' and _zerotier_version is succeeded

- name: install or update zerotier
  block:
    - name: create temporary file for zerotier msi
      win_tempfile:
        state: file
        prefix: ZeroTierOne
        suffix: .msi
      register: _zerotier_tempfile
    - name: download zerotier msi
      win_get_url:
        url: "{{ zerotier_msi_url }}"
        dest: "{{ _zerotier_tempfile.path }}"
        force: true
    - name: install zerotier msi
      win_package:
        path: "{{ _zerotier_tempfile.path }}"
    - name: wait for zerotier secret file to be generated
      win_wait_for:
        path: "{{ zerotier_secret_path }}"
        timeout: 30
  always:
    - name: remove temporary package file
      win_file:
        path: "{{ _zerotier_tempfile.path }}"
        state: absent
      when: _zerotier_tempfile.path | default(false, true)
  when: >-
    (zerotier_state in ('present', 'latest') and _zerotier_version is failed) or
    (zerotier_state == 'latest' and _zerotier_needs_upgrade | default(false))

- name: uninstall zerotier
  win_package:
    product_id: "{{ item }}"
    state: absent
  with_items: "{{ zerotier_product_ids }}"
  when: zerotier_state == 'absent'

- name: join/leave network
  include_tasks: "win_network.yml"
